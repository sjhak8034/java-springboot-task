on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for Gradle
        run: chmod +x ./gradlew

      # 4. Gradle 빌드 및 테스트
      - name: create env
        run: echo "${{ secrets.ENV }}" >> .env

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Rename jar to app.jar
        run: mv build/libs/*.jar build/libs/app.jar



      # 5. 도커 이미지 빌드 및 푸시
      - name: Docker Build and Push
        if: ${{ (github.event_name == 'pull_request' || github.event_name == 'push') && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}

        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_ID: ${{ secrets.DATABASE_ID }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DOCKER_HUB_REPOSITORY: ${{ secrets.DOCKER_HUB_REPOSITORY }}


        run: |
          echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
          docker build \
            --build-arg DATABASE_URL="$DATABASE_URL" \
            --build-arg DATABASE_ID="$DATABASE_ID" \
            --build-arg DATABASE_PASSWORD="$DATABASE_PASSWORD" \
            -t "$DOCKER_HUB_REPOSITORY":main .
          docker push "$DOCKER_HUB_REPOSITORY":main

      # 6. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 7. AWS 배포
      - name: SSH Connection and Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_SSH_HOST }}
          username: ${{ secrets.AWS_SSH_USERNAME }}
          key: ${{ secrets.AWS_SSH_KEY }}
          port: 22
          script: |
            echo "$DOCKER_PASS" | sudo docker login -u "$DOCKER_USER" --password-stdin
            sudo docker rm -f server2
            sudo docker pull "${{ secrets.DOCKER_HUB_REPOSITORY }}:main"
            sudo docker run2 -d \
              --name server \
              -e TZ=Asia/Seoul \
              -e JPA_HIBERNATE_DDL=${{ secrets.JPA_HIBERNATE_DDL }} \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e DATABASE_USERNAME=${{ secrets.DATABASE_ID }} \
              -e DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              -e ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
              -e SECRET_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e REDIS_HOST=${{ secrets.REDIS_HOST }} \
              -p 8080:8080 "${{ secrets.DOCKER_HUB_REPOSITORY }}:main"
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_USERNAME: ${{ secrets.DATABASE_ID }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          JPA_HIBERNATE_DDL: ${{ secrets.JPA_HIBERNATE_DDL }}
        
          
